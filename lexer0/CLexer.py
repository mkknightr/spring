# Generated from CLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,34,216,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,1,0,1,0,5,0,72,8,0,10,0,12,0,75,9,0,1,0,3,0,78,8,0,
        1,0,1,0,1,0,1,0,1,1,1,1,5,1,86,8,1,10,1,12,1,89,9,1,1,2,1,2,1,2,
        5,2,94,8,2,10,2,12,2,97,9,2,3,2,99,8,2,1,3,4,3,102,8,3,11,3,12,3,
        103,1,3,1,3,5,3,108,8,3,10,3,12,3,111,9,3,1,4,1,4,1,4,1,4,1,5,1,
        5,1,5,1,5,1,5,1,6,1,6,5,6,124,8,6,10,6,12,6,127,9,6,1,6,1,6,1,7,
        1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,
        1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,18,
        1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,
        1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,
        1,31,4,31,186,8,31,11,31,12,31,187,1,31,1,31,1,32,1,32,1,32,1,32,
        5,32,196,8,32,10,32,12,32,199,9,32,1,32,1,32,1,32,1,32,1,32,1,33,
        1,33,1,33,1,33,5,33,210,8,33,10,33,12,33,213,9,33,1,33,1,33,2,125,
        197,0,34,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
        23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
        34,1,0,7,2,0,10,10,13,13,3,0,65,90,95,95,97,122,4,0,48,57,65,90,
        95,95,97,122,1,0,49,57,1,0,48,57,5,0,48,48,102,102,110,110,114,114,
        116,116,3,0,9,10,13,13,32,32,226,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
        0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
        0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
        0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
        0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
        0,0,67,1,0,0,0,1,69,1,0,0,0,3,83,1,0,0,0,5,98,1,0,0,0,7,101,1,0,
        0,0,9,112,1,0,0,0,11,116,1,0,0,0,13,121,1,0,0,0,15,130,1,0,0,0,17,
        132,1,0,0,0,19,134,1,0,0,0,21,136,1,0,0,0,23,138,1,0,0,0,25,140,
        1,0,0,0,27,142,1,0,0,0,29,145,1,0,0,0,31,148,1,0,0,0,33,150,1,0,
        0,0,35,153,1,0,0,0,37,155,1,0,0,0,39,158,1,0,0,0,41,161,1,0,0,0,
        43,164,1,0,0,0,45,166,1,0,0,0,47,168,1,0,0,0,49,170,1,0,0,0,51,172,
        1,0,0,0,53,174,1,0,0,0,55,176,1,0,0,0,57,178,1,0,0,0,59,180,1,0,
        0,0,61,182,1,0,0,0,63,185,1,0,0,0,65,191,1,0,0,0,67,205,1,0,0,0,
        69,73,5,35,0,0,70,72,8,0,0,0,71,70,1,0,0,0,72,75,1,0,0,0,73,71,1,
        0,0,0,73,74,1,0,0,0,74,77,1,0,0,0,75,73,1,0,0,0,76,78,5,13,0,0,77,
        76,1,0,0,0,77,78,1,0,0,0,78,79,1,0,0,0,79,80,5,10,0,0,80,81,1,0,
        0,0,81,82,6,0,0,0,82,2,1,0,0,0,83,87,7,1,0,0,84,86,7,2,0,0,85,84,
        1,0,0,0,86,89,1,0,0,0,87,85,1,0,0,0,87,88,1,0,0,0,88,4,1,0,0,0,89,
        87,1,0,0,0,90,99,5,48,0,0,91,95,7,3,0,0,92,94,7,4,0,0,93,92,1,0,
        0,0,94,97,1,0,0,0,95,93,1,0,0,0,95,96,1,0,0,0,96,99,1,0,0,0,97,95,
        1,0,0,0,98,90,1,0,0,0,98,91,1,0,0,0,99,6,1,0,0,0,100,102,7,4,0,0,
        101,100,1,0,0,0,102,103,1,0,0,0,103,101,1,0,0,0,103,104,1,0,0,0,
        104,105,1,0,0,0,105,109,5,46,0,0,106,108,7,4,0,0,107,106,1,0,0,0,
        108,111,1,0,0,0,109,107,1,0,0,0,109,110,1,0,0,0,110,8,1,0,0,0,111,
        109,1,0,0,0,112,113,5,39,0,0,113,114,9,0,0,0,114,115,5,39,0,0,115,
        10,1,0,0,0,116,117,5,39,0,0,117,118,5,92,0,0,118,119,7,5,0,0,119,
        120,5,39,0,0,120,12,1,0,0,0,121,125,5,34,0,0,122,124,9,0,0,0,123,
        122,1,0,0,0,124,127,1,0,0,0,125,126,1,0,0,0,125,123,1,0,0,0,126,
        128,1,0,0,0,127,125,1,0,0,0,128,129,5,34,0,0,129,14,1,0,0,0,130,
        131,5,43,0,0,131,16,1,0,0,0,132,133,5,45,0,0,133,18,1,0,0,0,134,
        135,5,42,0,0,135,20,1,0,0,0,136,137,5,47,0,0,137,22,1,0,0,0,138,
        139,5,37,0,0,139,24,1,0,0,0,140,141,5,61,0,0,141,26,1,0,0,0,142,
        143,5,61,0,0,143,144,5,61,0,0,144,28,1,0,0,0,145,146,5,33,0,0,146,
        147,5,61,0,0,147,30,1,0,0,0,148,149,5,60,0,0,149,32,1,0,0,0,150,
        151,5,60,0,0,151,152,5,61,0,0,152,34,1,0,0,0,153,154,5,62,0,0,154,
        36,1,0,0,0,155,156,5,62,0,0,156,157,5,61,0,0,157,38,1,0,0,0,158,
        159,5,38,0,0,159,160,5,38,0,0,160,40,1,0,0,0,161,162,5,124,0,0,162,
        163,5,124,0,0,163,42,1,0,0,0,164,165,5,33,0,0,165,44,1,0,0,0,166,
        167,5,38,0,0,167,46,1,0,0,0,168,169,5,59,0,0,169,48,1,0,0,0,170,
        171,5,44,0,0,171,50,1,0,0,0,172,173,5,40,0,0,173,52,1,0,0,0,174,
        175,5,41,0,0,175,54,1,0,0,0,176,177,5,123,0,0,177,56,1,0,0,0,178,
        179,5,125,0,0,179,58,1,0,0,0,180,181,5,91,0,0,181,60,1,0,0,0,182,
        183,5,93,0,0,183,62,1,0,0,0,184,186,7,6,0,0,185,184,1,0,0,0,186,
        187,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,189,1,0,0,0,189,
        190,6,31,0,0,190,64,1,0,0,0,191,192,5,47,0,0,192,193,5,42,0,0,193,
        197,1,0,0,0,194,196,9,0,0,0,195,194,1,0,0,0,196,199,1,0,0,0,197,
        198,1,0,0,0,197,195,1,0,0,0,198,200,1,0,0,0,199,197,1,0,0,0,200,
        201,5,42,0,0,201,202,5,47,0,0,202,203,1,0,0,0,203,204,6,32,0,0,204,
        66,1,0,0,0,205,206,5,47,0,0,206,207,5,47,0,0,207,211,1,0,0,0,208,
        210,8,0,0,0,209,208,1,0,0,0,210,213,1,0,0,0,211,209,1,0,0,0,211,
        212,1,0,0,0,212,214,1,0,0,0,213,211,1,0,0,0,214,215,6,33,0,0,215,
        68,1,0,0,0,12,0,73,77,87,95,98,103,109,125,187,197,211,1,6,0,0
    ]

class CLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PREPROCESSOR_DIRECTIVE = 1
    ID = 2
    INT = 3
    FLOAT = 4
    CHAR = 5
    ESCAPE_CHAR = 6
    STRING = 7
    PLUS = 8
    MINUS = 9
    MULTIPLY = 10
    DIVIDE = 11
    MODULO = 12
    ASSIGN = 13
    EQUAL = 14
    NOT_EQUAL = 15
    LESS = 16
    LESS_EQUAL = 17
    GREATER = 18
    GREATER_EQUAL = 19
    AND = 20
    OR = 21
    NOT = 22
    ADDRESS_OF = 23
    SEMI = 24
    COMMA = 25
    LPAREN = 26
    RPAREN = 27
    LBRACE = 28
    RBRACE = 29
    LBRACK = 30
    RBRACK = 31
    WS = 32
    BLOCK_COMMENT = 33
    LINE_COMMENT = 34

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'+'", "'-'", "'*'", "'/'", "'%'", "'='", "'=='", "'!='", "'<'", 
            "'<='", "'>'", "'>='", "'&&'", "'||'", "'!'", "'&'", "';'", 
            "','", "'('", "')'", "'{'", "'}'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "PREPROCESSOR_DIRECTIVE", "ID", "INT", "FLOAT", "CHAR", "ESCAPE_CHAR", 
            "STRING", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULO", "ASSIGN", 
            "EQUAL", "NOT_EQUAL", "LESS", "LESS_EQUAL", "GREATER", "GREATER_EQUAL", 
            "AND", "OR", "NOT", "ADDRESS_OF", "SEMI", "COMMA", "LPAREN", 
            "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "WS", "BLOCK_COMMENT", 
            "LINE_COMMENT" ]

    ruleNames = [ "PREPROCESSOR_DIRECTIVE", "ID", "INT", "FLOAT", "CHAR", 
                  "ESCAPE_CHAR", "STRING", "PLUS", "MINUS", "MULTIPLY", 
                  "DIVIDE", "MODULO", "ASSIGN", "EQUAL", "NOT_EQUAL", "LESS", 
                  "LESS_EQUAL", "GREATER", "GREATER_EQUAL", "AND", "OR", 
                  "NOT", "ADDRESS_OF", "SEMI", "COMMA", "LPAREN", "RPAREN", 
                  "LBRACE", "RBRACE", "LBRACK", "RBRACK", "WS", "BLOCK_COMMENT", 
                  "LINE_COMMENT" ]

    grammarFileName = "CLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


