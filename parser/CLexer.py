# Generated from CLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,51,320,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,1,0,1,0,5,0,
        106,8,0,10,0,12,0,109,9,0,1,0,3,0,112,8,0,1,0,1,0,1,0,1,0,1,1,1,
        1,1,1,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,
        8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,13,1,13,
        1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,18,1,18,
        1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,
        1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,
        1,31,1,31,1,32,4,32,191,8,32,11,32,12,32,192,1,32,1,32,1,33,1,33,
        1,33,1,33,5,33,201,8,33,10,33,12,33,204,9,33,1,33,1,33,1,33,1,33,
        1,33,1,34,1,34,1,34,1,34,5,34,215,8,34,10,34,12,34,218,9,34,1,34,
        1,34,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,
        1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,
        1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,
        1,44,1,45,1,45,5,45,276,8,45,10,45,12,45,279,9,45,1,46,1,46,1,46,
        5,46,284,8,46,10,46,12,46,287,9,46,3,46,289,8,46,1,47,4,47,292,8,
        47,11,47,12,47,293,1,47,1,47,5,47,298,8,47,10,47,12,47,301,9,47,
        1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,50,1,50,5,50,314,
        8,50,10,50,12,50,317,9,50,1,50,1,50,2,202,315,0,51,1,1,3,2,5,3,7,
        4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
        16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,
        27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,
        38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,
        49,99,50,101,51,1,0,7,2,0,10,10,13,13,3,0,9,10,13,13,32,32,3,0,65,
        90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,49,57,1,0,48,57,
        5,0,48,48,102,102,110,110,114,114,116,116,330,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
        0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
        0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,
        0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,
        0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,
        0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,
        0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,
        0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,1,103,1,
        0,0,0,3,117,1,0,0,0,5,120,1,0,0,0,7,123,1,0,0,0,9,125,1,0,0,0,11,
        127,1,0,0,0,13,129,1,0,0,0,15,131,1,0,0,0,17,133,1,0,0,0,19,135,
        1,0,0,0,21,138,1,0,0,0,23,141,1,0,0,0,25,143,1,0,0,0,27,146,1,0,
        0,0,29,148,1,0,0,0,31,151,1,0,0,0,33,154,1,0,0,0,35,157,1,0,0,0,
        37,159,1,0,0,0,39,161,1,0,0,0,41,163,1,0,0,0,43,165,1,0,0,0,45,167,
        1,0,0,0,47,170,1,0,0,0,49,173,1,0,0,0,51,175,1,0,0,0,53,177,1,0,
        0,0,55,179,1,0,0,0,57,181,1,0,0,0,59,183,1,0,0,0,61,185,1,0,0,0,
        63,187,1,0,0,0,65,190,1,0,0,0,67,196,1,0,0,0,69,210,1,0,0,0,71,221,
        1,0,0,0,73,225,1,0,0,0,75,231,1,0,0,0,77,236,1,0,0,0,79,241,1,0,
        0,0,81,248,1,0,0,0,83,251,1,0,0,0,85,256,1,0,0,0,87,262,1,0,0,0,
        89,266,1,0,0,0,91,273,1,0,0,0,93,288,1,0,0,0,95,291,1,0,0,0,97,302,
        1,0,0,0,99,306,1,0,0,0,101,311,1,0,0,0,103,107,5,35,0,0,104,106,
        8,0,0,0,105,104,1,0,0,0,106,109,1,0,0,0,107,105,1,0,0,0,107,108,
        1,0,0,0,108,111,1,0,0,0,109,107,1,0,0,0,110,112,5,13,0,0,111,110,
        1,0,0,0,111,112,1,0,0,0,112,113,1,0,0,0,113,114,5,10,0,0,114,115,
        1,0,0,0,115,116,6,0,0,0,116,2,1,0,0,0,117,118,5,43,0,0,118,119,5,
        43,0,0,119,4,1,0,0,0,120,121,5,45,0,0,121,122,5,45,0,0,122,6,1,0,
        0,0,123,124,5,43,0,0,124,8,1,0,0,0,125,126,5,45,0,0,126,10,1,0,0,
        0,127,128,5,42,0,0,128,12,1,0,0,0,129,130,5,47,0,0,130,14,1,0,0,
        0,131,132,5,37,0,0,132,16,1,0,0,0,133,134,5,61,0,0,134,18,1,0,0,
        0,135,136,5,61,0,0,136,137,5,61,0,0,137,20,1,0,0,0,138,139,5,33,
        0,0,139,140,5,61,0,0,140,22,1,0,0,0,141,142,5,60,0,0,142,24,1,0,
        0,0,143,144,5,60,0,0,144,145,5,61,0,0,145,26,1,0,0,0,146,147,5,62,
        0,0,147,28,1,0,0,0,148,149,5,62,0,0,149,150,5,61,0,0,150,30,1,0,
        0,0,151,152,5,38,0,0,152,153,5,38,0,0,153,32,1,0,0,0,154,155,5,124,
        0,0,155,156,5,124,0,0,156,34,1,0,0,0,157,158,5,33,0,0,158,36,1,0,
        0,0,159,160,5,126,0,0,160,38,1,0,0,0,161,162,5,38,0,0,162,40,1,0,
        0,0,163,164,5,94,0,0,164,42,1,0,0,0,165,166,5,124,0,0,166,44,1,0,
        0,0,167,168,5,60,0,0,168,169,5,60,0,0,169,46,1,0,0,0,170,171,5,62,
        0,0,171,172,5,62,0,0,172,48,1,0,0,0,173,174,5,59,0,0,174,50,1,0,
        0,0,175,176,5,44,0,0,176,52,1,0,0,0,177,178,5,40,0,0,178,54,1,0,
        0,0,179,180,5,41,0,0,180,56,1,0,0,0,181,182,5,123,0,0,182,58,1,0,
        0,0,183,184,5,125,0,0,184,60,1,0,0,0,185,186,5,91,0,0,186,62,1,0,
        0,0,187,188,5,93,0,0,188,64,1,0,0,0,189,191,7,1,0,0,190,189,1,0,
        0,0,191,192,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,194,1,0,
        0,0,194,195,6,32,0,0,195,66,1,0,0,0,196,197,5,47,0,0,197,198,5,42,
        0,0,198,202,1,0,0,0,199,201,9,0,0,0,200,199,1,0,0,0,201,204,1,0,
        0,0,202,203,1,0,0,0,202,200,1,0,0,0,203,205,1,0,0,0,204,202,1,0,
        0,0,205,206,5,42,0,0,206,207,5,47,0,0,207,208,1,0,0,0,208,209,6,
        33,0,0,209,68,1,0,0,0,210,211,5,47,0,0,211,212,5,47,0,0,212,216,
        1,0,0,0,213,215,8,0,0,0,214,213,1,0,0,0,215,218,1,0,0,0,216,214,
        1,0,0,0,216,217,1,0,0,0,217,219,1,0,0,0,218,216,1,0,0,0,219,220,
        6,34,0,0,220,70,1,0,0,0,221,222,5,105,0,0,222,223,5,110,0,0,223,
        224,5,116,0,0,224,72,1,0,0,0,225,226,5,102,0,0,226,227,5,108,0,0,
        227,228,5,111,0,0,228,229,5,97,0,0,229,230,5,116,0,0,230,74,1,0,
        0,0,231,232,5,99,0,0,232,233,5,104,0,0,233,234,5,97,0,0,234,235,
        5,114,0,0,235,76,1,0,0,0,236,237,5,118,0,0,237,238,5,111,0,0,238,
        239,5,105,0,0,239,240,5,100,0,0,240,78,1,0,0,0,241,242,5,114,0,0,
        242,243,5,101,0,0,243,244,5,116,0,0,244,245,5,117,0,0,245,246,5,
        114,0,0,246,247,5,110,0,0,247,80,1,0,0,0,248,249,5,105,0,0,249,250,
        5,102,0,0,250,82,1,0,0,0,251,252,5,101,0,0,252,253,5,108,0,0,253,
        254,5,115,0,0,254,255,5,101,0,0,255,84,1,0,0,0,256,257,5,119,0,0,
        257,258,5,104,0,0,258,259,5,105,0,0,259,260,5,108,0,0,260,261,5,
        101,0,0,261,86,1,0,0,0,262,263,5,102,0,0,263,264,5,111,0,0,264,265,
        5,114,0,0,265,88,1,0,0,0,266,267,5,115,0,0,267,268,5,105,0,0,268,
        269,5,122,0,0,269,270,5,101,0,0,270,271,5,111,0,0,271,272,5,102,
        0,0,272,90,1,0,0,0,273,277,7,2,0,0,274,276,7,3,0,0,275,274,1,0,0,
        0,276,279,1,0,0,0,277,275,1,0,0,0,277,278,1,0,0,0,278,92,1,0,0,0,
        279,277,1,0,0,0,280,289,5,48,0,0,281,285,7,4,0,0,282,284,7,5,0,0,
        283,282,1,0,0,0,284,287,1,0,0,0,285,283,1,0,0,0,285,286,1,0,0,0,
        286,289,1,0,0,0,287,285,1,0,0,0,288,280,1,0,0,0,288,281,1,0,0,0,
        289,94,1,0,0,0,290,292,7,5,0,0,291,290,1,0,0,0,292,293,1,0,0,0,293,
        291,1,0,0,0,293,294,1,0,0,0,294,295,1,0,0,0,295,299,5,46,0,0,296,
        298,7,5,0,0,297,296,1,0,0,0,298,301,1,0,0,0,299,297,1,0,0,0,299,
        300,1,0,0,0,300,96,1,0,0,0,301,299,1,0,0,0,302,303,5,39,0,0,303,
        304,9,0,0,0,304,305,5,39,0,0,305,98,1,0,0,0,306,307,5,39,0,0,307,
        308,5,92,0,0,308,309,7,6,0,0,309,310,5,39,0,0,310,100,1,0,0,0,311,
        315,5,34,0,0,312,314,9,0,0,0,313,312,1,0,0,0,314,317,1,0,0,0,315,
        316,1,0,0,0,315,313,1,0,0,0,316,318,1,0,0,0,317,315,1,0,0,0,318,
        319,5,34,0,0,319,102,1,0,0,0,12,0,107,111,192,202,216,277,285,288,
        293,299,315,1,6,0,0
    ]

class CLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PREPROCESSOR_DIRECTIVE = 1
    SELF_INC = 2
    SELF_DEC = 3
    PLUS = 4
    MINUS = 5
    MULTIPLY = 6
    DIVIDE = 7
    MODULO = 8
    ASSIGN = 9
    EQUAL = 10
    NOT_EQUAL = 11
    LESS = 12
    LESS_EQUAL = 13
    GREATER = 14
    GREATER_EQUAL = 15
    AND = 16
    OR = 17
    NOT = 18
    REVERSE = 19
    OP_AND = 20
    OP_XOR = 21
    OP_OR = 22
    SHL = 23
    SHR = 24
    SEMI = 25
    COMMA = 26
    LPAREN = 27
    RPAREN = 28
    LBRACE = 29
    RBRACE = 30
    LBRACK = 31
    RBRACK = 32
    WS = 33
    BLOCK_COMMENT = 34
    LINE_COMMENT = 35
    INT_TYPE = 36
    FLOAT_TYPE = 37
    CHAR_TYPE = 38
    VOID_TYPE = 39
    RET = 40
    IF = 41
    ELSE = 42
    WHILE = 43
    FOR = 44
    SIZEOF = 45
    ID = 46
    INT = 47
    FLOAT = 48
    CHAR = 49
    ESCAPE_CHAR = 50
    STRING = 51

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'++'", "'--'", "'+'", "'-'", "'*'", "'/'", "'%'", "'='", "'=='", 
            "'!='", "'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", "'!'", 
            "'~'", "'&'", "'^'", "'|'", "'<<'", "'>>'", "';'", "','", "'('", 
            "')'", "'{'", "'}'", "'['", "']'", "'int'", "'float'", "'char'", 
            "'void'", "'return'", "'if'", "'else'", "'while'", "'for'", 
            "'sizeof'" ]

    symbolicNames = [ "<INVALID>",
            "PREPROCESSOR_DIRECTIVE", "SELF_INC", "SELF_DEC", "PLUS", "MINUS", 
            "MULTIPLY", "DIVIDE", "MODULO", "ASSIGN", "EQUAL", "NOT_EQUAL", 
            "LESS", "LESS_EQUAL", "GREATER", "GREATER_EQUAL", "AND", "OR", 
            "NOT", "REVERSE", "OP_AND", "OP_XOR", "OP_OR", "SHL", "SHR", 
            "SEMI", "COMMA", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", 
            "RBRACK", "WS", "BLOCK_COMMENT", "LINE_COMMENT", "INT_TYPE", 
            "FLOAT_TYPE", "CHAR_TYPE", "VOID_TYPE", "RET", "IF", "ELSE", 
            "WHILE", "FOR", "SIZEOF", "ID", "INT", "FLOAT", "CHAR", "ESCAPE_CHAR", 
            "STRING" ]

    ruleNames = [ "PREPROCESSOR_DIRECTIVE", "SELF_INC", "SELF_DEC", "PLUS", 
                  "MINUS", "MULTIPLY", "DIVIDE", "MODULO", "ASSIGN", "EQUAL", 
                  "NOT_EQUAL", "LESS", "LESS_EQUAL", "GREATER", "GREATER_EQUAL", 
                  "AND", "OR", "NOT", "REVERSE", "OP_AND", "OP_XOR", "OP_OR", 
                  "SHL", "SHR", "SEMI", "COMMA", "LPAREN", "RPAREN", "LBRACE", 
                  "RBRACE", "LBRACK", "RBRACK", "WS", "BLOCK_COMMENT", "LINE_COMMENT", 
                  "INT_TYPE", "FLOAT_TYPE", "CHAR_TYPE", "VOID_TYPE", "RET", 
                  "IF", "ELSE", "WHILE", "FOR", "SIZEOF", "ID", "INT", "FLOAT", 
                  "CHAR", "ESCAPE_CHAR", "STRING" ]

    grammarFileName = "CLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


